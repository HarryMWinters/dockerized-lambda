version: 3

vars:
  PROJECT: "dockerized-lambda"
  GIT_HASH:
    sh: git rev-parse HEAD

  # This is how poetry knows to install from a private PyPI
  # Note the it will fall back to the public PyPI.
  PyPI_USERNAME:
  PyPI_PASSWORD:
  PyPI_DOMAIN:

  # These are used to auto-magically configure
  # pip or twine to take to AWS CodeArtifact.
  CODE_ARTIFACT_DOMAIN: ""
  CODE_ARTIFACT_REPOSITORY: FOO_ARTIFACT_REPO
  CODE_ARTIFACT_TOOL: pip
  CODE_ARTIFACT_DOMAIN_OWNER: ""
  CODE_ARTIFACT_REGION: us-west-2


tasks:
  build-docker:
    desc: 'Build docker image (does not publish).'
    cmds:
      - echo [INFO] building image for {{.PROJECT}}
      - docker build
        --tag {{.PROJECT}}-{{.GIT_HASH}}
        --build-arg PyPI_DOMAIN={{.PyPI_DOMAIN}}
        --build-arg PyPI_USERNAME={{.PyPI_USERNAME}}
        --build-arg PyPI_PASSWORD={{.PyPI_PASSWORD}} .
      # TODO: Optionally extract PyPI vars from aws codeartifact call

  run-docker:
    desc: 'Run the server as a container in your local docker. Requires active AWS session'
    deps: [build-docker]
    cmds:
      - docker run -p 9001:8080 {{.PROJECT}}-{{.GIT_HASH}}


  set-up-code-artifact:
    # TODO modify poetry instead of pip
    desc: 'Configure poetry to use CodeArtifact.'
    cmds:
      - aws codeartifact login \
        --tool {{.CODE_ARTIFACT_TOOL}} \
        --repository {{.CODE_ARTIFACT_REPOSITORY}} \
        --domain {{.CODE_ARTIFACT_DOMAIN}} \
        --domain-owner {{.CODE_ARTIFACT_DOMAIN_OWNER}} \
        --region {{.CODE_ARTIFACT_REGION}}

  unit:
    desc: 'project unit-tests step'
    deps: [create-virtual-env]
    cmds:
      - $HOME/.poetry/bin/poetry run pytest

  pre-commit:
    desc: Run pre-commit on all files in the repo
    deps: [create-virtual-env]
    cmds:
      - $HOME/.poetry/bin/poetry run pre-commit install
      - $HOME/.poetry/bin/poetry run pre-commit run --all-files

  create-virtual-env:
    desc: Create virtual environment for development and testing.
    deps: [install-poetry]
    cmds:
      - $HOME/.poetry/bin/poetry install

  install-poetry:
    desc: "Install poetry package manager."
    cmds:
      # TODO find a way to install poetry that isn't running a script from the internet.
      - curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
    status:
      - poetry --version
    generates:
      - $HOME/.poetry/env

  ci:
    desc: 'project ci steps'
    cmds:
      - echo [INFO] running {{.PROJECT}} ci
      - task: pre-commit
      - task: unit
      - task: build-docker
      - task: publish-image
      - task: deploy-lambda

  publish:
    desc: 'publish image to registry.'
    cmds:
      - echo [INFO] Not Implemented

  deploy-lambda:
    desc: 'Update lambda function to use latest image.'
    cmds:
      - echo [INFO] Not Implemented
